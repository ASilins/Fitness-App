@page "/register"
@inject MemberService memberService
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <div>
            <h3>Create member</h3>
            <div class="form-group field">
                <label>User Name:</label>
                <input type="text" @bind="username" @bind:event="oninput" />

                <label>Password:</label>
                <input type="password" @bind="password" @bind:event="oninput" />
                @if (password.Length <= 7)
                {
                    <label style="color: #f00; font-style: oblique;">Password must contain no less than 8 characters!</label>
                }
                @if (!string.IsNullOrEmpty(resultmsg))
                {
                    <label style="color: @colour">@resultmsg</label>
                }
            </div>
            <div class="button-row">
                <button @onclick="CreateMemberAsync"
                    disabled="@(string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password) || password.Length <= 7)"
                    class="acceptbtn">Register</button>
            </div>
        </div>
    </NotAuthorized>
    <Authorized>
        <Redirect url="/" />
    </Authorized>
</AuthorizeView>

@code {
    private string username = "";
    private string password = "";
    private string resultmsg = "";
    private string colour = "";

    private async Task CreateMemberAsync()
    {
        resultmsg = "";

        try
        {
            var member = new MemberDTO
            {
                Username = username,
                Password = Encoding.ASCII.GetBytes(password)
            };
            await memberService.CreateMember(member);
            resultmsg = "User created";
            username = "";
            password = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultmsg = e.Message;
            colour = "red";
        }
    }
}